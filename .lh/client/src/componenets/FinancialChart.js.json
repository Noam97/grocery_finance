{
    "sourceFile": "client/src/componenets/FinancialChart.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1738073806963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738073900179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n       })\r\n         .then(response => {\r\n           const data = response.data;\r\n           const newData = data.map(item => [\r\n-            item.date,\r\n+            new Date(item.date), // המרת המחרוזת לתאריך\r\n             item.income,\r\n             item.outcome,\r\n             item.clear,\r\n           ]);\r\n@@ -39,9 +39,13 @@\n         height=\"400px\"\r\n         data={chartData}\r\n         options={{\r\n           title: 'Financial Data',\r\n-          hAxis: { title: 'Date' },\r\n+          hAxis: { \r\n+            title: 'Date',\r\n+            format: 'yyyy-MM-dd', // הגדרת פורמט התאריך\r\n+            gridlines: { count: 15 }\r\n+          },\r\n           vAxis: { title: 'Amount' },\r\n           series: {\r\n             0: { color: 'red' },\r\n             1: { color: 'blue' },\r\n"
                },
                {
                    "date": 1738073955081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,14 +13,18 @@\n         params: { start: startDate, end: endDate }\r\n       })\r\n         .then(response => {\r\n           const data = response.data;\r\n-          const newData = data.map(item => [\r\n-            new Date(item.date), // המרת המחרוזת לתאריך\r\n-            item.income,\r\n-            item.outcome,\r\n-            item.clear,\r\n-          ]);\r\n+          const newData = data.map(item => {\r\n+            const date = new Date(item.date);\r\n+            const formattedDate = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\r\n+            return [\r\n+              formattedDate, // תאריך בפורמט yyyy-MM-dd\r\n+              item.income,\r\n+              item.outcome,\r\n+              item.clear,\r\n+            ];\r\n+          });\r\n \r\n           setChartData([\r\n             ['Date', 'Income', 'Outcome', 'Clear'], // ראשי העמודות\r\n             ...newData // הוספת הנתונים שהתקבלו מה-API\r\n"
                },
                {
                    "date": 1738074202515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,12 +14,11 @@\n       })\r\n         .then(response => {\r\n           const data = response.data;\r\n           const newData = data.map(item => {\r\n-            const date = new Date(item.date);\r\n-            const formattedDate = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\r\n+            const date = new Date(item.date); // המרת התאריך לאובייקט Date\r\n             return [\r\n-              formattedDate, // תאריך בפורמט yyyy-MM-dd\r\n+              date, // עכשיו התאריך הוא אובייקט Date ולא מחרוזת\r\n               item.income,\r\n               item.outcome,\r\n               item.clear,\r\n             ];\r\n"
                },
                {
                    "date": 1738074465357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import axios from 'axios';\r\n \r\n function FinancialChart({ startDate, endDate }) {\r\n   const [chartData, setChartData] = useState([\r\n-    ['Date', 'Income', 'Outcome', 'Clear'], // ראשי העמודות של הגרף\r\n+    ['Income', 'Outcome', 'Clear'], // כותרות העמודות לנתונים\r\n   ]);\r\n \r\n   useEffect(() => {\r\n     if (startDate && endDate) {\r\n@@ -13,20 +13,16 @@\n         params: { start: startDate, end: endDate }\r\n       })\r\n         .then(response => {\r\n           const data = response.data;\r\n-          const newData = data.map(item => {\r\n-            const date = new Date(item.date); // המרת התאריך לאובייקט Date\r\n-            return [\r\n-              date, // עכשיו התאריך הוא אובייקט Date ולא מחרוזת\r\n-              item.income,\r\n-              item.outcome,\r\n-              item.clear,\r\n-            ];\r\n-          });\r\n+          const newData = data.map(item => [\r\n+            item.income,  // הכנסה\r\n+            item.outcome, // הוצאה\r\n+            item.clear,   // רווח\r\n+          ]);\r\n \r\n           setChartData([\r\n-            ['Date', 'Income', 'Outcome', 'Clear'], // ראשי העמודות\r\n+            ['Income', 'Outcome', 'Clear'], // כותרות העמודות\r\n             ...newData // הוספת הנתונים שהתקבלו מה-API\r\n           ]);\r\n         })\r\n         .catch(error => console.error('Error fetching chart data:', error));\r\n@@ -42,18 +38,17 @@\n         height=\"400px\"\r\n         data={chartData}\r\n         options={{\r\n           title: 'Financial Data',\r\n-          hAxis: { \r\n+          hAxis: {\r\n             title: 'Date',\r\n-            format: 'yyyy-MM-dd', // הגדרת פורמט התאריך\r\n-            gridlines: { count: 15 }\r\n+            gridlines: { count: 15 },\r\n           },\r\n           vAxis: { title: 'Amount' },\r\n           series: {\r\n-            0: { color: 'red' },\r\n-            1: { color: 'blue' },\r\n-            2: { color: 'green' },\r\n+            0: { color: 'red' }, // הכנסה\r\n+            1: { color: 'blue' }, // הוצאה\r\n+            2: { color: 'green' }, // רווח\r\n           },\r\n         }}\r\n       />\r\n     </div>\r\n"
                },
                {
                    "date": 1738074518735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Chart } from 'react-google-charts';\r\n+import axios from 'axios';\r\n+\r\n+function FinancialChart({ startDate, endDate }) {\r\n+  const [chartData, setChartData] = useState([\r\n+    ['Income', 'Outcome', 'Clear'], // כותרות העמודות לנתונים\r\n+  ]);\r\n+\r\n+  useEffect(() => {\r\n+    if (startDate && endDate) {\r\n+      axios.get('http://localhost:5000/api/data', {\r\n+        params: { start: startDate, end: endDate }\r\n+      })\r\n+        .then(response => {\r\n+          const data = response.data;\r\n+          const newData = data.map(item => [\r\n+            item.income,  // הכנסה\r\n+            item.outcome, // הוצאה\r\n+            item.clear,   // רווח\r\n+          ]);\r\n+\r\n+          setChartData([\r\n+            ['Income', 'Outcome', 'Clear'], // כותרות העמודות\r\n+            ...newData // הוספת הנתונים שהתקבלו מה-API\r\n+          ]);\r\n+        })\r\n+        .catch(error => console.error('Error fetching chart data:', error));\r\n+    }\r\n+  }, [startDate, endDate]);\r\n+\r\n+  return (\r\n+    <div>\r\n+      <h2>Financial Data Chart</h2>\r\n+      <Chart\r\n+        chartType=\"LineChart\"\r\n+        width=\"100%\"\r\n+        height=\"400px\"\r\n+        data={chartData}\r\n+        options={{\r\n+          title: 'Financial Data',\r\n+          // hAxis: {\r\n+          //   title: 'Date',\r\n+          //   gridlines: { count: 15 },\r\n+          // },\r\n+          vAxis: { title: 'Amount' },\r\n+          series: {\r\n+            0: { color: 'red' }, // הכנסה\r\n+            1: { color: 'blue' }, // הוצאה\r\n+            2: { color: 'green' }, // רווח\r\n+          },\r\n+        }}\r\n+      />\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default FinancialChart;\r\n"
                },
                {
                    "date": 1738074544905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,12 +38,12 @@\n         height=\"400px\"\r\n         data={chartData}\r\n         options={{\r\n           title: 'Financial Data',\r\n-          // hAxis: {\r\n-          //   title: 'Date',\r\n-          //   gridlines: { count: 15 },\r\n-          // },\r\n+          hAxis: {\r\n+            title: 'Date',\r\n+            gridlines: { count: 15 },\r\n+          },\r\n           vAxis: { title: 'Amount' },\r\n           series: {\r\n             0: { color: 'red' }, // הכנסה\r\n             1: { color: 'blue' }, // הוצאה\r\n"
                },
                {
                    "date": 1738074606945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,10 @@\n import { Chart } from 'react-google-charts';\r\n import axios from 'axios';\r\n \r\n function FinancialChart({ startDate, endDate }) {\r\n-  const [chartData, setChartData] = useState([\r\n-    ['Income', 'Outcome', 'Clear'], // כותרות העמודות לנתונים\r\n+  const [chartData, setChartData] = useState([  // הכותרת לא תחשב כחלק מהנתונים\r\n+    ['Date', 'Income', 'Outcome', 'Clear'], // כותרות העמודות לנתונים\r\n   ]);\r\n \r\n   useEffect(() => {\r\n     if (startDate && endDate) {\r\n@@ -13,16 +13,21 @@\n         params: { start: startDate, end: endDate }\r\n       })\r\n         .then(response => {\r\n           const data = response.data;\r\n-          const newData = data.map(item => [\r\n-            item.income,  // הכנסה\r\n-            item.outcome, // הוצאה\r\n-            item.clear,   // רווח\r\n-          ]);\r\n+          const newData = data.map(item => {\r\n+            const date = new Date(item.date);\r\n+            const formattedDate = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\r\n+            return [\r\n+              formattedDate, // תאריך בפורמט yyyy-MM-dd\r\n+              item.income,\r\n+              item.outcome,\r\n+              item.clear,\r\n+            ];\r\n+          });\r\n \r\n           setChartData([\r\n-            ['Income', 'Outcome', 'Clear'], // כותרות העמודות\r\n+            ['Date', 'Income', 'Outcome', 'Clear'], // ראשי העמודות\r\n             ...newData // הוספת הנתונים שהתקבלו מה-API\r\n           ]);\r\n         })\r\n         .catch(error => console.error('Error fetching chart data:', error));\r\n@@ -35,14 +40,15 @@\n       <Chart\r\n         chartType=\"LineChart\"\r\n         width=\"100%\"\r\n         height=\"400px\"\r\n-        data={chartData}\r\n+        data={chartData} // כאן כל הנתונים (כולל כותרת) נשלחים לגרף\r\n         options={{\r\n           title: 'Financial Data',\r\n-          hAxis: {\r\n+          hAxis: { \r\n             title: 'Date',\r\n-            gridlines: { count: 15 },\r\n+            format: 'yyyy-MM-dd', // הגדרת פורמט התאריך\r\n+            gridlines: { count: 15 }\r\n           },\r\n           vAxis: { title: 'Amount' },\r\n           series: {\r\n             0: { color: 'red' }, // הכנסה\r\n@@ -55,62 +61,4 @@\n   );\r\n }\r\n \r\n export default FinancialChart;\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Chart } from 'react-google-charts';\r\n-import axios from 'axios';\r\n-\r\n-function FinancialChart({ startDate, endDate }) {\r\n-  const [chartData, setChartData] = useState([\r\n-    ['Income', 'Outcome', 'Clear'], // כותרות העמודות לנתונים\r\n-  ]);\r\n-\r\n-  useEffect(() => {\r\n-    if (startDate && endDate) {\r\n-      axios.get('http://localhost:5000/api/data', {\r\n-        params: { start: startDate, end: endDate }\r\n-      })\r\n-        .then(response => {\r\n-          const data = response.data;\r\n-          const newData = data.map(item => [\r\n-            item.income,  // הכנסה\r\n-            item.outcome, // הוצאה\r\n-            item.clear,   // רווח\r\n-          ]);\r\n-\r\n-          setChartData([\r\n-            ['Income', 'Outcome', 'Clear'], // כותרות העמודות\r\n-            ...newData // הוספת הנתונים שהתקבלו מה-API\r\n-          ]);\r\n-        })\r\n-        .catch(error => console.error('Error fetching chart data:', error));\r\n-    }\r\n-  }, [startDate, endDate]);\r\n-\r\n-  return (\r\n-    <div>\r\n-      <h2>Financial Data Chart</h2>\r\n-      <Chart\r\n-        chartType=\"LineChart\"\r\n-        width=\"100%\"\r\n-        height=\"400px\"\r\n-        data={chartData}\r\n-        options={{\r\n-          title: 'Financial Data',\r\n-          hAxis: {\r\n-            title: 'Date',\r\n-            gridlines: { count: 15 },\r\n-          },\r\n-          vAxis: { title: 'Amount' },\r\n-          series: {\r\n-            0: { color: 'red' }, // הכנסה\r\n-            1: { color: 'blue' }, // הוצאה\r\n-            2: { color: 'green' }, // רווח\r\n-          },\r\n-        }}\r\n-      />\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-export default FinancialChart;\r\n"
                },
                {
                    "date": 1738074704254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { Chart } from 'react-google-charts';\r\n import axios from 'axios';\r\n \r\n function FinancialChart({ startDate, endDate }) {\r\n-  const [chartData, setChartData] = useState([  // הכותרת לא תחשב כחלק מהנתונים\r\n+  const [chartData, setChartData] = useState([\r\n     ['Date', 'Income', 'Outcome', 'Clear'], // כותרות העמודות לנתונים\r\n   ]);\r\n \r\n   useEffect(() => {\r\n@@ -28,8 +28,10 @@\n           setChartData([\r\n             ['Date', 'Income', 'Outcome', 'Clear'], // ראשי העמודות\r\n             ...newData // הוספת הנתונים שהתקבלו מה-API\r\n           ]);\r\n+\r\n+          console.log(chartData); // הדפסת הנתונים לאחר העדכון של chartData\r\n         })\r\n         .catch(error => console.error('Error fetching chart data:', error));\r\n     }\r\n   }, [startDate, endDate]);\r\n"
                },
                {
                    "date": 1738076386217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,14 +28,12 @@\n           setChartData([\r\n             ['Date', 'Income', 'Outcome', 'Clear'], // ראשי העמודות\r\n             ...newData // הוספת הנתונים שהתקבלו מה-API\r\n           ]);\r\n-\r\n-          console.log(chartData); // הדפסת הנתונים לאחר העדכון של chartData\r\n         })\r\n         .catch(error => console.error('Error fetching chart data:', error));\r\n     }\r\n-  }, [startDate, endDate]);\r\n+  }, [startDate, endDate]); // הוספתי את התלות הנכונה כאן, ללא 'chartData'\r\n \r\n   return (\r\n     <div>\r\n       <h2>Financial Data Chart</h2>\r\n"
                },
                {
                    "date": 1738076614348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n       axios.get('http://localhost:5000/api/data', {\r\n         params: { start: startDate, end: endDate }\r\n       })\r\n         .then(response => {\r\n+          console.log(response.data);\r\n           const data = response.data;\r\n           const newData = data.map(item => {\r\n             const date = new Date(item.date);\r\n             const formattedDate = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\r\n"
                },
                {
                    "date": 1738076665153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n       axios.get('http://localhost:5000/api/data', {\r\n         params: { start: startDate, end: endDate }\r\n       })\r\n         .then(response => {\r\n-          console.log(response.data);\r\n+          console.log(\"data\"response.data);\r\n           const data = response.data;\r\n           const newData = data.map(item => {\r\n             const date = new Date(item.date);\r\n             const formattedDate = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\r\n"
                },
                {
                    "date": 1738076952246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n       axios.get('http://localhost:5000/api/data', {\r\n         params: { start: startDate, end: endDate }\r\n       })\r\n         .then(response => {\r\n-          console.log(\"data\"response.data);\r\n+          console.log('Received data from API:', response.data); // הדפסת הנתונים שהתקבלו\r\n           const data = response.data;\r\n           const newData = data.map(item => {\r\n             const date = new Date(item.date);\r\n             const formattedDate = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\r\n@@ -25,17 +25,20 @@\n               item.clear,\r\n             ];\r\n           });\r\n \r\n+          // עדכון chartData\r\n           setChartData([\r\n             ['Date', 'Income', 'Outcome', 'Clear'], // ראשי העמודות\r\n             ...newData // הוספת הנתונים שהתקבלו מה-API\r\n           ]);\r\n         })\r\n         .catch(error => console.error('Error fetching chart data:', error));\r\n     }\r\n-  }, [startDate, endDate]); // הוספתי את התלות הנכונה כאן, ללא 'chartData'\r\n+  }, [startDate, endDate]); // תלות ב-startDate ו-endDate\r\n \r\n+  console.log(chartData); // הדפסת chartData אחרי העדכון\r\n+\r\n   return (\r\n     <div>\r\n       <h2>Financial Data Chart</h2>\r\n       <Chart\r\n@@ -44,12 +47,12 @@\n         height=\"400px\"\r\n         data={chartData} // כאן כל הנתונים (כולל כותרת) נשלחים לגרף\r\n         options={{\r\n           title: 'Financial Data',\r\n-          hAxis: { \r\n+          hAxis: {\r\n             title: 'Date',\r\n             format: 'yyyy-MM-dd', // הגדרת פורמט התאריך\r\n-            gridlines: { count: 15 }\r\n+            gridlines: { count: 15 },\r\n           },\r\n           vAxis: { title: 'Amount' },\r\n           series: {\r\n             0: { color: 'red' }, // הכנסה\r\n"
                },
                {
                    "date": 1738087335075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n           const newData = data.map(item => {\r\n             const date = new Date(item.date);\r\n             const formattedDate = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\r\n             return [\r\n-              כ, // תאריך בפורמט yyyy-MM-dd\r\n+              , // תאריך בפורמט yyyy-MM-dd\r\n               item.income,\r\n               item.outcome,\r\n               item.clear,\r\n             ];\r\n"
                },
                {
                    "date": 1738087975758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     }\r\n   }, [startDate, endDate]); // תלות ב-startDate ו-endDate\r\n   \r\n \r\n-  console.log(chartData); // הדפסת chartData אחרי העדכון\r\n+  console.log(chartData); \r\n \r\n   return (\r\n     <div>\r\n       <h2>Financial Data Chart</h2>\r\n"
                }
            ],
            "date": 1738073806963,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport { Chart } from 'react-google-charts';\r\nimport axios from 'axios';\r\n\r\nfunction FinancialChart({ startDate, endDate }) {\r\n  const [chartData, setChartData] = useState([\r\n    ['Date', 'Income', 'Outcome', 'Clear'], // ראשי העמודות של הגרף\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (startDate && endDate) {\r\n      axios.get('http://localhost:5000/api/data', {\r\n        params: { start: startDate, end: endDate }\r\n      })\r\n        .then(response => {\r\n          const data = response.data;\r\n          const newData = data.map(item => [\r\n            item.date,\r\n            item.income,\r\n            item.outcome,\r\n            item.clear,\r\n          ]);\r\n\r\n          setChartData([\r\n            ['Date', 'Income', 'Outcome', 'Clear'], // ראשי העמודות\r\n            ...newData // הוספת הנתונים שהתקבלו מה-API\r\n          ]);\r\n        })\r\n        .catch(error => console.error('Error fetching chart data:', error));\r\n    }\r\n  }, [startDate, endDate]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Financial Data Chart</h2>\r\n      <Chart\r\n        chartType=\"LineChart\"\r\n        width=\"100%\"\r\n        height=\"400px\"\r\n        data={chartData}\r\n        options={{\r\n          title: 'Financial Data',\r\n          hAxis: { title: 'Date' },\r\n          vAxis: { title: 'Amount' },\r\n          series: {\r\n            0: { color: 'red' },\r\n            1: { color: 'blue' },\r\n            2: { color: 'green' },\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FinancialChart;\r\n"
        }
    ]
}