{
    "sourceFile": "server/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1738072218603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738072256097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+const express = require('express');\r\n+const cors = require('cors');\r\n+const dotenv = require('dotenv');\r\n+const { Client } = require('pg');\r\n+\r\n+dotenv.config();\r\n+\r\n+const app = express();\r\n+const PORT = process.env.PORT || 5000;\r\n+\r\n+app.use(cors());\r\n+app.use(express.json());\r\n+\r\n+const client = new Client({\r\n+    connectionString: process.env.DB_URL,\r\n+    ssl: { rejectUnauthorized: false }\r\n+});\r\n+\r\n+app.get('/', (req, res) => {\r\n+    res.send('API is running...');\r\n+});\r\n+\r\n+app.listen(PORT, () => {\r\n+    console.log(`Server is running on http://localhost:${PORT}`);\r\n+});\r\n+\r\n+client.query('SELECT NOW()', (err, res) => {\r\n+    if (err) {\r\n+        console.error('❌ Database connection failed:', err.stack);\r\n+    } else {\r\n+        console.log('✅ Connected to NeonDB! Current time:', res.rows[0].now);\r\n+    }\r\n+});\r\n+\r\n+client.connect()\r\n+    .then(() => {\r\n+        console.log('✅ Connected to NeonDB!');\r\n+        return client.query('SELECT NOW()');\r\n+    })\r\n+    .then(res => {\r\n+        console.log('📅 Current time in DB:', res.rows[0].now);\r\n+    })\r\n+    .catch(err => {\r\n+        console.error('❌ Database connection failed:', err.stack);\r\n+    });\r\n+\r\n+    app.get('/api/data', async (req, res) => {\r\n+        try {\r\n+            const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n+            res.json(result.rows);\r\n+        } catch (error) {\r\n+            console.error('❌ Error fetching data:', error);\r\n+            res.status(500).json({ error: 'Internal server error' });\r\n+        }\r\n+    });\r\n+\r\n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738072276852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,71 +53,53 @@\n             res.status(500).json({ error: 'Internal server error' });\r\n         }\r\n     });\r\n \r\n-   \n-const express = require('express');\r\n-const cors = require('cors');\r\n-const dotenv = require('dotenv');\r\n-const { Client } = require('pg');\r\n+    client.connect()\r\n+    .then(() => {\r\n+        console.log('✅ Connected to NeonDB!');\r\n+        return client.query(`\r\n+            CREATE TABLE IF NOT EXISTS financial_data (\r\n+                id SERIAL PRIMARY KEY,\r\n+                date DATE NOT NULL,\r\n+                income DECIMAL(10,2) NOT NULL,\r\n+                outcome DECIMAL(10,2) NOT NULL,\r\n+                clear DECIMAL(10,2) GENERATED ALWAYS AS (income - outcome) STORED\r\n+            );\r\n+        `);\r\n+    })\r\n+    .then(() => {\r\n+        console.log('✅ Table created or already exists!');\r\n+    })\r\n+    .catch(err => {\r\n+        console.error('❌ Error creating table:', err.stack);\r\n+    });\r\n \r\n-dotenv.config();\r\n-\r\n-const app = express();\r\n-const PORT = process.env.PORT || 5000;\r\n-\r\n-app.use(cors());\r\n-app.use(express.json());\r\n-\r\n-const client = new Client({\r\n-    connectionString: process.env.DB_URL,\r\n-    ssl: { rejectUnauthorized: false }\r\n-});\r\n-\r\n+// נתיב לבדיקת החיבור\r\n app.get('/', (req, res) => {\r\n     res.send('API is running...');\r\n });\r\n \r\n+// נתיב לשליפת הנתונים\r\n+app.get('/api/data', async (req, res) => {\r\n+    try {\r\n+        const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n+        res.json(result.rows);\r\n+    } catch (error) {\r\n+        console.error('❌ Error fetching data:', error);\r\n+        res.status(500).json({ error: 'Internal server error' });\r\n+    }\r\n+});\r\n+\r\n+// הפעלת השרת\r\n app.listen(PORT, () => {\r\n     console.log(`Server is running on http://localhost:${PORT}`);\r\n });\r\n \r\n+// בדיקה אם החיבור למסד הנתונים עובד\r\n client.query('SELECT NOW()', (err, res) => {\r\n     if (err) {\r\n         console.error('❌ Database connection failed:', err.stack);\r\n     } else {\r\n         console.log('✅ Connected to NeonDB! Current time:', res.rows[0].now);\r\n     }\r\n-});\r\n\\ No newline at end of file\n-\r\n-client.connect()\r\n-    .then(() => {\r\n-        console.log('✅ Connected to NeonDB!');\r\n-        return client.query('SELECT NOW()');\r\n-    })\r\n-    .then(res => {\r\n-        console.log('📅 Current time in DB:', res.rows[0].now);\r\n-    })\r\n-    .catch(err => {\r\n-        console.error('❌ Database connection failed:', err.stack);\r\n-    });\r\n-\r\n-    app.get('/api/data', async (req, res) => {\r\n-        try {\r\n-            const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n-            res.json(result.rows);\r\n-        } catch (error) {\r\n-            console.error('❌ Error fetching data:', error);\r\n-            res.status(500).json({ error: 'Internal server error' });\r\n-        }\r\n-    });\r\n-\r\n-    DROP TABLE IF EXISTS financial_data;\r\n-    CREATE TABLE financial_data (\r\n-        id SERIAL PRIMARY KEY,\r\n-        date DATE NOT NULL,\r\n-        income DECIMAL(10,2) NOT NULL,\r\n-        outcome DECIMAL(10,2) NOT NULL,\r\n-        clear DECIMAL(10,2) GENERATED ALWAYS AS (income - outcome) STORED\r\n-    );\r\n-    \r\n-    SELECT * FROM financial_data;\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738072474426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n dotenv.config();\r\n \r\n const app = express();\r\n-const PORT = process.env.PORT || 5000;\r\n+const PORT = process.env.PORT || 5001;\r\n \r\n app.use(cors());\r\n app.use(express.json());\r\n \r\n"
                },
                {
                    "date": 1738072488493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n dotenv.config();\r\n \r\n const app = express();\r\n-const PORT = process.env.PORT || 5001;\r\n+const PORT = process.env.PORT || 5000;\r\n \r\n app.use(cors());\r\n app.use(express.json());\r\n \r\n"
                },
                {
                    "date": 1738072505593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,63 +43,63 @@\n     .catch(err => {\r\n         console.error('❌ Database connection failed:', err.stack);\r\n     });\r\n \r\n-    app.get('/api/data', async (req, res) => {\r\n-        try {\r\n-            const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n-            res.json(result.rows);\r\n-        } catch (error) {\r\n-            console.error('❌ Error fetching data:', error);\r\n-            res.status(500).json({ error: 'Internal server error' });\r\n-        }\r\n-    });\r\n+//     app.get('/api/data', async (req, res) => {\r\n+//         try {\r\n+//             const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n+//             res.json(result.rows);\r\n+//         } catch (error) {\r\n+//             console.error('❌ Error fetching data:', error);\r\n+//             res.status(500).json({ error: 'Internal server error' });\r\n+//         }\r\n+//     });\r\n \r\n-    client.connect()\r\n-    .then(() => {\r\n-        console.log('✅ Connected to NeonDB!');\r\n-        return client.query(`\r\n-            CREATE TABLE IF NOT EXISTS financial_data (\r\n-                id SERIAL PRIMARY KEY,\r\n-                date DATE NOT NULL,\r\n-                income DECIMAL(10,2) NOT NULL,\r\n-                outcome DECIMAL(10,2) NOT NULL,\r\n-                clear DECIMAL(10,2) GENERATED ALWAYS AS (income - outcome) STORED\r\n-            );\r\n-        `);\r\n-    })\r\n-    .then(() => {\r\n-        console.log('✅ Table created or already exists!');\r\n-    })\r\n-    .catch(err => {\r\n-        console.error('❌ Error creating table:', err.stack);\r\n-    });\r\n+//     client.connect()\r\n+//     .then(() => {\r\n+//         console.log('✅ Connected to NeonDB!');\r\n+//         return client.query(`\r\n+//             CREATE TABLE IF NOT EXISTS financial_data (\r\n+//                 id SERIAL PRIMARY KEY,\r\n+//                 date DATE NOT NULL,\r\n+//                 income DECIMAL(10,2) NOT NULL,\r\n+//                 outcome DECIMAL(10,2) NOT NULL,\r\n+//                 clear DECIMAL(10,2) GENERATED ALWAYS AS (income - outcome) STORED\r\n+//             );\r\n+//         `);\r\n+//     })\r\n+//     .then(() => {\r\n+//         console.log('✅ Table created or already exists!');\r\n+//     })\r\n+//     .catch(err => {\r\n+//         console.error('❌ Error creating table:', err.stack);\r\n+//     });\r\n \r\n-// נתיב לבדיקת החיבור\r\n\\ No newline at end of file\n-app.get('/', (req, res) => {\r\n-    res.send('API is running...');\r\n-});\r\n+// // נתיב לבדיקת החיבור\r\n+// app.get('/', (req, res) => {\r\n+//     res.send('API is running...');\r\n+// });\r\n \r\n-// נתיב לשליפת הנתונים\r\n-app.get('/api/data', async (req, res) => {\r\n-    try {\r\n-        const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n-        res.json(result.rows);\r\n-    } catch (error) {\r\n-        console.error('❌ Error fetching data:', error);\r\n-        res.status(500).json({ error: 'Internal server error' });\r\n-    }\r\n-});\r\n+// // נתיב לשליפת הנתונים\r\n+// app.get('/api/data', async (req, res) => {\r\n+//     try {\r\n+//         const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n+//         res.json(result.rows);\r\n+//     } catch (error) {\r\n+//         console.error('❌ Error fetching data:', error);\r\n+//         res.status(500).json({ error: 'Internal server error' });\r\n+//     }\r\n+// });\r\n \r\n-// הפעלת השרת\r\n-app.listen(PORT, () => {\r\n-    console.log(`Server is running on http://localhost:${PORT}`);\r\n-});\r\n+// // הפעלת השרת\r\n+// app.listen(PORT, () => {\r\n+//     console.log(`Server is running on http://localhost:${PORT}`);\r\n+// });\r\n \r\n-// בדיקה אם החיבור למסד הנתונים עובד\r\n-client.query('SELECT NOW()', (err, res) => {\r\n-    if (err) {\r\n-        console.error('❌ Database connection failed:', err.stack);\r\n-    } else {\r\n-        console.log('✅ Connected to NeonDB! Current time:', res.rows[0].now);\r\n-    }\r\n-});\n+// // בדיקה אם החיבור למסד הנתונים עובד\r\n+// client.query('SELECT NOW()', (err, res) => {\r\n+//     if (err) {\r\n+//         console.error('❌ Database connection failed:', err.stack);\r\n+//     } else {\r\n+//         console.log('✅ Connected to NeonDB! Current time:', res.rows[0].now);\r\n+//     }\r\n+// });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738072516298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,17 +43,17 @@\n     .catch(err => {\r\n         console.error('❌ Database connection failed:', err.stack);\r\n     });\r\n \r\n-//     app.get('/api/data', async (req, res) => {\r\n-//         try {\r\n-//             const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n-//             res.json(result.rows);\r\n-//         } catch (error) {\r\n-//             console.error('❌ Error fetching data:', error);\r\n-//             res.status(500).json({ error: 'Internal server error' });\r\n-//         }\r\n-//     });\r\n+    app.get('/api/data', async (req, res) => {\r\n+        try {\r\n+            const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n+            res.json(result.rows);\r\n+        } catch (error) {\r\n+            console.error('❌ Error fetching data:', error);\r\n+            res.status(500).json({ error: 'Internal server error' });\r\n+        }\r\n+    });\r\n \r\n //     client.connect()\r\n //     .then(() => {\r\n //         console.log('✅ Connected to NeonDB!');\r\n"
                },
                {
                    "date": 1738072532409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,19 +31,19 @@\n         console.log('✅ Connected to NeonDB! Current time:', res.rows[0].now);\r\n     }\r\n });\r\n \r\n-client.connect()\r\n-    .then(() => {\r\n-        console.log('✅ Connected to NeonDB!');\r\n-        return client.query('SELECT NOW()');\r\n-    })\r\n-    .then(res => {\r\n-        console.log('📅 Current time in DB:', res.rows[0].now);\r\n-    })\r\n-    .catch(err => {\r\n-        console.error('❌ Database connection failed:', err.stack);\r\n-    });\r\n+// client.connect()\r\n+//     .then(() => {\r\n+//         console.log('✅ Connected to NeonDB!');\r\n+//         return client.query('SELECT NOW()');\r\n+//     })\r\n+//     .then(res => {\r\n+//         console.log('📅 Current time in DB:', res.rows[0].now);\r\n+//     })\r\n+//     .catch(err => {\r\n+//         console.error('❌ Database connection failed:', err.stack);\r\n+//     });\r\n \r\n     app.get('/api/data', async (req, res) => {\r\n         try {\r\n             const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n"
                },
                {
                    "date": 1738072538395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,53 +53,53 @@\n             res.status(500).json({ error: 'Internal server error' });\r\n         }\r\n     });\r\n \r\n-//     client.connect()\r\n-//     .then(() => {\r\n-//         console.log('✅ Connected to NeonDB!');\r\n-//         return client.query(`\r\n-//             CREATE TABLE IF NOT EXISTS financial_data (\r\n-//                 id SERIAL PRIMARY KEY,\r\n-//                 date DATE NOT NULL,\r\n-//                 income DECIMAL(10,2) NOT NULL,\r\n-//                 outcome DECIMAL(10,2) NOT NULL,\r\n-//                 clear DECIMAL(10,2) GENERATED ALWAYS AS (income - outcome) STORED\r\n-//             );\r\n-//         `);\r\n-//     })\r\n-//     .then(() => {\r\n-//         console.log('✅ Table created or already exists!');\r\n-//     })\r\n-//     .catch(err => {\r\n-//         console.error('❌ Error creating table:', err.stack);\r\n-//     });\r\n+    client.connect()\r\n+    .then(() => {\r\n+        console.log('✅ Connected to NeonDB!');\r\n+        return client.query(`\r\n+            CREATE TABLE IF NOT EXISTS financial_data (\r\n+                id SERIAL PRIMARY KEY,\r\n+                date DATE NOT NULL,\r\n+                income DECIMAL(10,2) NOT NULL,\r\n+                outcome DECIMAL(10,2) NOT NULL,\r\n+                clear DECIMAL(10,2) GENERATED ALWAYS AS (income - outcome) STORED\r\n+            );\r\n+        `);\r\n+    })\r\n+    .then(() => {\r\n+        console.log('✅ Table created or already exists!');\r\n+    })\r\n+    .catch(err => {\r\n+        console.error('❌ Error creating table:', err.stack);\r\n+    });\r\n \r\n-// // נתיב לבדיקת החיבור\r\n-// app.get('/', (req, res) => {\r\n-//     res.send('API is running...');\r\n-// });\r\n+// נתיב לבדיקת החיבור\r\n+app.get('/', (req, res) => {\r\n+    res.send('API is running...');\r\n+});\r\n \r\n-// // נתיב לשליפת הנתונים\r\n\\ No newline at end of file\n-// app.get('/api/data', async (req, res) => {\r\n-//     try {\r\n-//         const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n-//         res.json(result.rows);\r\n-//     } catch (error) {\r\n-//         console.error('❌ Error fetching data:', error);\r\n-//         res.status(500).json({ error: 'Internal server error' });\r\n-//     }\r\n-// });\r\n+// נתיב לשליפת הנתונים\r\n+app.get('/api/data', async (req, res) => {\r\n+    try {\r\n+        const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n+        res.json(result.rows);\r\n+    } catch (error) {\r\n+        console.error('❌ Error fetching data:', error);\r\n+        res.status(500).json({ error: 'Internal server error' });\r\n+    }\r\n+});\r\n \r\n-// // הפעלת השרת\r\n-// app.listen(PORT, () => {\r\n-//     console.log(`Server is running on http://localhost:${PORT}`);\r\n-// });\r\n+// הפעלת השרת\r\n+app.listen(PORT, () => {\r\n+    console.log(`Server is running on http://localhost:${PORT}`);\r\n+});\r\n \r\n-// // בדיקה אם החיבור למסד הנתונים עובד\r\n-// client.query('SELECT NOW()', (err, res) => {\r\n-//     if (err) {\r\n-//         console.error('❌ Database connection failed:', err.stack);\r\n-//     } else {\r\n-//         console.log('✅ Connected to NeonDB! Current time:', res.rows[0].now);\r\n-//     }\r\n-// });\n+// בדיקה אם החיבור למסד הנתונים עובד\r\n+client.query('SELECT NOW()', (err, res) => {\r\n+    if (err) {\r\n+        console.error('❌ Database connection failed:', err.stack);\r\n+    } else {\r\n+        console.log('✅ Connected to NeonDB! Current time:', res.rows[0].now);\r\n+    }\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738072627777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,52 +10,16 @@\n \r\n app.use(cors());\r\n app.use(express.json());\r\n \r\n+// יצירת חיבור למסד הנתונים\r\n const client = new Client({\r\n     connectionString: process.env.DB_URL,\r\n     ssl: { rejectUnauthorized: false }\r\n });\r\n \r\n-app.get('/', (req, res) => {\r\n-    res.send('API is running...');\r\n-});\r\n-\r\n-app.listen(PORT, () => {\r\n-    console.log(`Server is running on http://localhost:${PORT}`);\r\n-});\r\n-\r\n-client.query('SELECT NOW()', (err, res) => {\r\n-    if (err) {\r\n-        console.error('❌ Database connection failed:', err.stack);\r\n-    } else {\r\n-        console.log('✅ Connected to NeonDB! Current time:', res.rows[0].now);\r\n-    }\r\n-});\r\n-\r\n-// client.connect()\r\n-//     .then(() => {\r\n-//         console.log('✅ Connected to NeonDB!');\r\n-//         return client.query('SELECT NOW()');\r\n-//     })\r\n-//     .then(res => {\r\n-//         console.log('📅 Current time in DB:', res.rows[0].now);\r\n-//     })\r\n-//     .catch(err => {\r\n-//         console.error('❌ Database connection failed:', err.stack);\r\n-//     });\r\n-\r\n-    app.get('/api/data', async (req, res) => {\r\n-        try {\r\n-            const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n-            res.json(result.rows);\r\n-        } catch (error) {\r\n-            console.error('❌ Error fetching data:', error);\r\n-            res.status(500).json({ error: 'Internal server error' });\r\n-        }\r\n-    });\r\n-\r\n-    client.connect()\r\n+// חיבור למסד הנתונים\r\n+client.connect()\r\n     .then(() => {\r\n         console.log('✅ Connected to NeonDB!');\r\n         return client.query(`\r\n             CREATE TABLE IF NOT EXISTS financial_data (\r\n@@ -73,13 +37,8 @@\n     .catch(err => {\r\n         console.error('❌ Error creating table:', err.stack);\r\n     });\r\n \r\n-// נתיב לבדיקת החיבור\r\n-app.get('/', (req, res) => {\r\n-    res.send('API is running...');\r\n-});\r\n-\r\n // נתיב לשליפת הנתונים\r\n app.get('/api/data', async (req, res) => {\r\n     try {\r\n         const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n@@ -93,13 +52,4 @@\n // הפעלת השרת\r\n app.listen(PORT, () => {\r\n     console.log(`Server is running on http://localhost:${PORT}`);\r\n });\r\n-\r\n-// בדיקה אם החיבור למסד הנתונים עובד\r\n-client.query('SELECT NOW()', (err, res) => {\r\n-    if (err) {\r\n-        console.error('❌ Database connection failed:', err.stack);\r\n-    } else {\r\n-        console.log('✅ Connected to NeonDB! Current time:', res.rows[0].now);\r\n-    }\r\n-});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738072819481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,14 @@\n     connectionString: process.env.DB_URL,\r\n     ssl: { rejectUnauthorized: false }\r\n });\r\n \r\n-// חיבור למסד הנתונים\r\n+// חיבור למסד הנתונים ויצירת הטבלה אם היא לא קיימת\r\n client.connect()\r\n     .then(() => {\r\n         console.log('✅ Connected to NeonDB!');\r\n+\r\n+        // יצירת הטבלה אם היא לא קיימת\r\n         return client.query(`\r\n             CREATE TABLE IF NOT EXISTS financial_data (\r\n                 id SERIAL PRIMARY KEY,\r\n                 date DATE NOT NULL,\r\n@@ -32,11 +34,25 @@\n         `);\r\n     })\r\n     .then(() => {\r\n         console.log('✅ Table created or already exists!');\r\n+        \r\n+        // הוספת נתונים לדוגמה אם הטבלה ריקה\r\n+        return client.query(`\r\n+            INSERT INTO financial_data (date, income, outcome)\r\n+            VALUES\r\n+                ('2021-06-01', 1000.00, 400.00),\r\n+                ('2021-06-02', 1200.00, 500.00),\r\n+                ('2021-06-03', 1500.00, 600.00),\r\n+                ('2021-06-04', 1300.00, 450.00)\r\n+            ON CONFLICT DO NOTHING;  -- אם הנתונים כבר קיימים, לא יכנסו שוב\r\n+        `);\r\n     })\r\n+    .then(() => {\r\n+        console.log('✅ Sample data inserted or already exists!');\r\n+    })\r\n     .catch(err => {\r\n-        console.error('❌ Error creating table:', err.stack);\r\n+        console.error('❌ Error creating table or inserting data:', err.stack);\r\n     });\r\n \r\n // נתיב לשליפת הנתונים\r\n app.get('/api/data', async (req, res) => {\r\n@@ -52,4 +68,13 @@\n // הפעלת השרת\r\n app.listen(PORT, () => {\r\n     console.log(`Server is running on http://localhost:${PORT}`);\r\n });\r\n+\r\n+// בדיקה אם החיבור למסד הנתונים עובד\r\n+client.query('SELECT NOW()', (err, res) => {\r\n+    if (err) {\r\n+        console.error('❌ Database connection failed:', err.stack);\r\n+    } else {\r\n+        console.log('✅ Connected to NeonDB! Current time:', res.rows[0].now);\r\n+    }\r\n+});\r\n"
                },
                {
                    "date": 1738072868853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,8 @@\n     .catch(err => {\r\n         console.error('❌ Error creating table or inserting data:', err.stack);\r\n     });\r\n \r\n-// נתיב לשליפת הנתונים\r\n app.get('/api/data', async (req, res) => {\r\n     try {\r\n         const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n         res.json(result.rows);\r\n"
                },
                {
                    "date": 1738073207702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,13 +43,13 @@\n                 ('2021-06-01', 1000.00, 400.00),\r\n                 ('2021-06-02', 1200.00, 500.00),\r\n                 ('2021-06-03', 1500.00, 600.00),\r\n                 ('2021-06-04', 1300.00, 450.00)\r\n-            ON CONFLICT DO NOTHING;  -- אם הנתונים כבר קיימים, לא יכנסו שוב\r\n+            ON CONFLICT DO NOTHING; \r\n         `);\r\n     })\r\n     .then(() => {\r\n-        console.log('✅ Sample data inserted or already exists!');\r\n+        console.log('Sample data inserted or already exists!');\r\n     })\r\n     .catch(err => {\r\n         console.error('❌ Error creating table or inserting data:', err.stack);\r\n     });\r\n"
                },
                {
                    "date": 1738073213831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,17 +50,17 @@\n     .then(() => {\r\n         console.log('Sample data inserted or already exists!');\r\n     })\r\n     .catch(err => {\r\n-        console.error('❌ Error creating table or inserting data:', err.stack);\r\n+        console.error('Error creating table or inserting data:', err.stack);\r\n     });\r\n \r\n app.get('/api/data', async (req, res) => {\r\n     try {\r\n         const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n         res.json(result.rows);\r\n     } catch (error) {\r\n-        console.error('❌ Error fetching data:', error);\r\n+        console.error('Error fetching data:', error);\r\n         res.status(500).json({ error: 'Internal server error' });\r\n     }\r\n });\r\n \r\n"
                },
                {
                    "date": 1738073221947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             );\r\n         `);\r\n     })\r\n     .then(() => {\r\n-        console.log('✅ Table created or already exists!');\r\n+        console.log('Table created or already exists!');\r\n         \r\n         // הוספת נתונים לדוגמה אם הטבלה ריקה\r\n         return client.query(`\r\n             INSERT INTO financial_data (date, income, outcome)\r\n@@ -71,9 +71,9 @@\n \r\n // בדיקה אם החיבור למסד הנתונים עובד\r\n client.query('SELECT NOW()', (err, res) => {\r\n     if (err) {\r\n-        console.error('❌ Database connection failed:', err.stack);\r\n+        console.error('Database connection failed:', err.stack);\r\n     } else {\r\n         console.log('✅ Connected to NeonDB! Current time:', res.rows[0].now);\r\n     }\r\n });\r\n"
                },
                {
                    "date": 1738073240051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n \r\n // חיבור למסד הנתונים ויצירת הטבלה אם היא לא קיימת\r\n client.connect()\r\n     .then(() => {\r\n-        console.log('✅ Connected to NeonDB!');\r\n+        console.log(' Connected to NeonDB!');\r\n \r\n         // יצירת הטבלה אם היא לא קיימת\r\n         return client.query(`\r\n             CREATE TABLE IF NOT EXISTS financial_data (\r\n@@ -73,7 +73,7 @@\n client.query('SELECT NOW()', (err, res) => {\r\n     if (err) {\r\n         console.error('Database connection failed:', err.stack);\r\n     } else {\r\n-        console.log('✅ Connected to NeonDB! Current time:', res.rows[0].now);\r\n+        console.log('Connected to NeonDB! Current time:', res.rows[0].now);\r\n     }\r\n });\r\n"
                },
                {
                    "date": 1738073302823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,11 @@\n     connectionString: process.env.DB_URL,\r\n     ssl: { rejectUnauthorized: false }\r\n });\r\n \r\n-// חיבור למסד הנתונים ויצירת הטבלה אם היא לא קיימת\r\n client.connect()\r\n     .then(() => {\r\n-        console.log(' Connected to NeonDB!');\r\n+        console.log('Connected to NeonDB!');\r\n \r\n         // יצירת הטבלה אם היא לא קיימת\r\n         return client.query(`\r\n             CREATE TABLE IF NOT EXISTS financial_data (\r\n"
                },
                {
                    "date": 1738073307954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n \r\n app.use(cors());\r\n app.use(express.json());\r\n \r\n-// יצירת חיבור למסד הנתונים\r\n const client = new Client({\r\n     connectionString: process.env.DB_URL,\r\n     ssl: { rejectUnauthorized: false }\r\n });\r\n@@ -20,9 +19,8 @@\n client.connect()\r\n     .then(() => {\r\n         console.log('Connected to NeonDB!');\r\n \r\n-        // יצירת הטבלה אם היא לא קיימת\r\n         return client.query(`\r\n             CREATE TABLE IF NOT EXISTS financial_data (\r\n                 id SERIAL PRIMARY KEY,\r\n                 date DATE NOT NULL,\r\n@@ -34,9 +32,8 @@\n     })\r\n     .then(() => {\r\n         console.log('Table created or already exists!');\r\n         \r\n-        // הוספת נתונים לדוגמה אם הטבלה ריקה\r\n         return client.query(`\r\n             INSERT INTO financial_data (date, income, outcome)\r\n             VALUES\r\n                 ('2021-06-01', 1000.00, 400.00),\r\n"
                },
                {
                    "date": 1738074047949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n client.connect()\r\n     .then(() => {\r\n         console.log('Connected to NeonDB!');\r\n \r\n+        // יצירת הטבלה אם היא לא קיימת\r\n         return client.query(`\r\n             CREATE TABLE IF NOT EXISTS financial_data (\r\n                 id SERIAL PRIMARY KEY,\r\n                 date DATE NOT NULL,\r\n@@ -32,20 +33,21 @@\n     })\r\n     .then(() => {\r\n         console.log('Table created or already exists!');\r\n         \r\n+        // הוספת נתונים לכל תקופה אם הם לא קיימים\r\n         return client.query(`\r\n             INSERT INTO financial_data (date, income, outcome)\r\n             VALUES\r\n                 ('2021-06-01', 1000.00, 400.00),\r\n                 ('2021-06-02', 1200.00, 500.00),\r\n                 ('2021-06-03', 1500.00, 600.00),\r\n                 ('2021-06-04', 1300.00, 450.00)\r\n-            ON CONFLICT DO NOTHING; \r\n+            ; \r\n         `);\r\n     })\r\n     .then(() => {\r\n-        console.log('Sample data inserted or already exists!');\r\n+        console.log('Sample data inserted!');\r\n     })\r\n     .catch(err => {\r\n         console.error('Error creating table or inserting data:', err.stack);\r\n     });\r\n"
                },
                {
                    "date": 1738074103701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,8 @@\n client.connect()\r\n     .then(() => {\r\n         console.log('Connected to NeonDB!');\r\n \r\n-        // יצירת הטבלה אם היא לא קיימת\r\n         return client.query(`\r\n             CREATE TABLE IF NOT EXISTS financial_data (\r\n                 id SERIAL PRIMARY KEY,\r\n                 date DATE NOT NULL,\r\n@@ -33,21 +32,20 @@\n     })\r\n     .then(() => {\r\n         console.log('Table created or already exists!');\r\n         \r\n-        // הוספת נתונים לכל תקופה אם הם לא קיימים\r\n         return client.query(`\r\n             INSERT INTO financial_data (date, income, outcome)\r\n             VALUES\r\n                 ('2021-06-01', 1000.00, 400.00),\r\n                 ('2021-06-02', 1200.00, 500.00),\r\n                 ('2021-06-03', 1500.00, 600.00),\r\n                 ('2021-06-04', 1300.00, 450.00)\r\n-            ; \r\n+            ON CONFLICT DO NOTHING; \r\n         `);\r\n     })\r\n     .then(() => {\r\n-        console.log('Sample data inserted!');\r\n+        console.log('Sample data inserted or already exists!');\r\n     })\r\n     .catch(err => {\r\n         console.error('Error creating table or inserting data:', err.stack);\r\n     });\r\n"
                },
                {
                    "date": 1738076760514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,9 @@\n app.get('/api/data', async (req, res) => {\r\n     try {\r\n         const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n         res.json(result.rows);\r\n+        console.log('Fetched data:', result.rows);\r\n     } catch (error) {\r\n         console.error('Error fetching data:', error);\r\n         res.status(500).json({ error: 'Internal server error' });\r\n     }\r\n"
                },
                {
                    "date": 1738076820141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,8 @@\n app.get('/api/data', async (req, res) => {\r\n     try {\r\n         const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n         res.json(result.rows);\r\n-        console.log('Fetched data:', result.rows);\r\n     } catch (error) {\r\n         console.error('Error fetching data:', error);\r\n         res.status(500).json({ error: 'Internal server error' });\r\n     }\r\n"
                },
                {
                    "date": 1738077017541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,10 @@\n \r\n app.get('/api/data', async (req, res) => {\r\n     try {\r\n         const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n+        // console.log('Fetched data:', result.rows);\r\n+\r\n         res.json(result.rows);\r\n     } catch (error) {\r\n         console.error('Error fetching data:', error);\r\n         res.status(500).json({ error: 'Internal server error' });\r\n"
                },
                {
                    "date": 1738089056038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         \r\n         return client.query(`\r\n             INSERT INTO financial_data (date, income, outcome)\r\n             VALUES\r\n-                ('2021-06-01', 1000.00, 400.00),\r\n+                ('2021-01-01', 1000.00, 400.00),\r\n                 ('2021-06-02', 1200.00, 500.00),\r\n                 ('2021-06-03', 1500.00, 600.00),\r\n                 ('2021-06-04', 1300.00, 450.00)\r\n             ON CONFLICT DO NOTHING; \r\n"
                },
                {
                    "date": 1738089061834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,11 +36,11 @@\n         return client.query(`\r\n             INSERT INTO financial_data (date, income, outcome)\r\n             VALUES\r\n                 ('2021-01-01', 1000.00, 400.00),\r\n-                ('2021-06-02', 1200.00, 500.00),\r\n+                ('2021-04-02', 1200.00, 500.00),\r\n                 ('2021-06-03', 1500.00, 600.00),\r\n-                ('2021-06-04', 1300.00, 450.00)\r\n+                ('2021-07-04', 1300.00, 450.00)\r\n             ON CONFLICT DO NOTHING; \r\n         `);\r\n     })\r\n     .then(() => {\r\n"
                },
                {
                    "date": 1738089244237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,20 +49,26 @@\n     .catch(err => {\r\n         console.error('Error creating table or inserting data:', err.stack);\r\n     });\r\n \r\n-app.get('/api/data', async (req, res) => {\r\n-    try {\r\n-        const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n-        // console.log('Fetched data:', result.rows);\r\n+    app.get('/api/data', async (req, res) => {\r\n+        const { start, end } = req.query;\r\n+      \r\n+        try {\r\n+          const result = await client.query(`\r\n+            SELECT * FROM financial_data\r\n+            WHERE DATE(date) BETWEEN DATE '${start}' AND DATE '${end}'\r\n+            ORDER BY date;\r\n+          `);\r\n+          console.log('Fetched data:', result.rows);\r\n+          res.json(result.rows);\r\n+        } catch (error) {\r\n+          console.error('Error fetching data:', error);\r\n+          res.status(500).json({ error: 'Internal server error' });\r\n+        }\r\n+      });\r\n+      \r\n \r\n-        res.json(result.rows);\r\n-    } catch (error) {\r\n-        console.error('Error fetching data:', error);\r\n-        res.status(500).json({ error: 'Internal server error' });\r\n-    }\r\n-});\r\n-\r\n // הפעלת השרת\r\n app.listen(PORT, () => {\r\n     console.log(`Server is running on http://localhost:${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1738089391330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,22 +51,24 @@\n     });\r\n \r\n     app.get('/api/data', async (req, res) => {\r\n         const { start, end } = req.query;\r\n-      \r\n+        console.log('Received start:', start, 'end:', end); // הדפס את התאריכים המתקבלים מהלקוח\r\n+    \r\n         try {\r\n-          const result = await client.query(`\r\n-            SELECT * FROM financial_data\r\n-            WHERE DATE(date) BETWEEN DATE '${start}' AND DATE '${end}'\r\n-            ORDER BY date;\r\n-          `);\r\n-          console.log('Fetched data:', result.rows);\r\n-          res.json(result.rows);\r\n+            const result = await client.query(`\r\n+                SELECT * FROM financial_data\r\n+                WHERE DATE(date) BETWEEN DATE '${start}' AND DATE '${end}'\r\n+                ORDER BY date;\r\n+            `);\r\n+            console.log('Fetched data:', result.rows); // הדפס את הנתונים שהחזרת\r\n+            res.json(result.rows);  // שלח את הנתונים ללקוח\r\n         } catch (error) {\r\n-          console.error('Error fetching data:', error);\r\n-          res.status(500).json({ error: 'Internal server error' });\r\n+            console.error('Error fetching data:', error);\r\n+            res.status(500).json({ error: 'Internal server error' });\r\n         }\r\n-      });\r\n+    });\r\n+    \r\n       \r\n \r\n // הפעלת השרת\r\n app.listen(PORT, () => {\r\n"
                },
                {
                    "date": 1738089913495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,25 +50,24 @@\n         console.error('Error creating table or inserting data:', err.stack);\r\n     });\r\n \r\n     app.get('/api/data', async (req, res) => {\r\n-        const { start, end } = req.query;\r\n-        console.log('Received start:', start, 'end:', end); // הדפס את התאריכים המתקבלים מהלקוח\r\n-    \r\n         try {\r\n             const result = await client.query(`\r\n-                SELECT * FROM financial_data\r\n-                WHERE DATE(date) BETWEEN DATE '${start}' AND DATE '${end}'\r\n+                SELECT DISTINCT date, income, outcome, clear\r\n+                FROM financial_data\r\n+                WHERE DATE(date) BETWEEN DATE '${startDate}' AND DATE '${endDate}'\r\n                 ORDER BY date;\r\n             `);\r\n-            console.log('Fetched data:', result.rows); // הדפס את הנתונים שהחזרת\r\n-            res.json(result.rows);  // שלח את הנתונים ללקוח\r\n+            console.log('Fetched data:', result.rows); // הדפסת הנתונים שהתקבלו\r\n+            res.json(result.rows); // שלח את הנתונים ללקוח\r\n         } catch (error) {\r\n             console.error('Error fetching data:', error);\r\n             res.status(500).json({ error: 'Internal server error' });\r\n         }\r\n     });\r\n     \r\n+    \r\n       \r\n \r\n // הפעלת השרת\r\n app.listen(PORT, () => {\r\n"
                },
                {
                    "date": 1738091997055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,22 +50,26 @@\n         console.error('Error creating table or inserting data:', err.stack);\r\n     });\r\n \r\n     app.get('/api/data', async (req, res) => {\r\n+        const startDate = req.query.start; // קבל את ה-startDate\r\n+        const endDate = req.query.end; // קבל את ה-endDate\r\n+        console.log('Received start date:', startDate);\r\n+        console.log('Received end date:', endDate);\r\n+      \r\n         try {\r\n-            const result = await client.query(`\r\n-                SELECT DISTINCT date, income, outcome, clear\r\n-                FROM financial_data\r\n-                WHERE DATE(date) BETWEEN DATE '${startDate}' AND DATE '${endDate}'\r\n-                ORDER BY date;\r\n-            `);\r\n-            console.log('Fetched data:', result.rows); // הדפסת הנתונים שהתקבלו\r\n-            res.json(result.rows); // שלח את הנתונים ללקוח\r\n+          const result = await client.query(\r\n+            `SELECT * FROM financial_data WHERE date >= $1 AND date <= $2 ORDER BY date`,\r\n+            [startDate, endDate]  // השתמש ב-startDate ו-endDate בבקשה SQL\r\n+          );\r\n+          console.log('Fetched data:', result.rows);\r\n+          res.json(result.rows);\r\n         } catch (error) {\r\n-            console.error('Error fetching data:', error);\r\n-            res.status(500).json({ error: 'Internal server error' });\r\n+          console.error('Error fetching data:', error);\r\n+          res.status(500).json({ error: 'Internal server error' });\r\n         }\r\n-    });\r\n+      });\r\n+      \r\n     \r\n // הפעלת השרת\r\n app.listen(PORT, () => {\r\n     console.log(`Server is running on http://localhost:${PORT}`);\r\n"
                },
                {
                    "date": 1738093043034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \r\n     app.get('/api/data', async (req, res) => {\r\n         try {\r\n             const result = await client.query(`\r\n-                SELECT date, income, outcome, clear\r\n+                SELECT DISTINCT date, income, outcome, clear\r\n                 FROM financial_data\r\n                 WHERE DATE(date) BETWEEN DATE '${startDate}' AND DATE '${endDate}'\r\n                 ORDER BY date;\r\n             `);\r\n"
                }
            ],
            "date": 1738072218603,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst cors = require('cors');\r\nconst dotenv = require('dotenv');\r\nconst { Client } = require('pg');\r\n\r\ndotenv.config();\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nconst client = new Client({\r\n    connectionString: process.env.DB_URL,\r\n    ssl: { rejectUnauthorized: false }\r\n});\r\n\r\napp.get('/', (req, res) => {\r\n    res.send('API is running...');\r\n});\r\n\r\napp.listen(PORT, () => {\r\n    console.log(`Server is running on http://localhost:${PORT}`);\r\n});\r\n\r\nclient.query('SELECT NOW()', (err, res) => {\r\n    if (err) {\r\n        console.error('❌ Database connection failed:', err.stack);\r\n    } else {\r\n        console.log('✅ Connected to NeonDB! Current time:', res.rows[0].now);\r\n    }\r\n});\r\n\r\nclient.connect()\r\n    .then(() => {\r\n        console.log('✅ Connected to NeonDB!');\r\n        return client.query('SELECT NOW()');\r\n    })\r\n    .then(res => {\r\n        console.log('📅 Current time in DB:', res.rows[0].now);\r\n    })\r\n    .catch(err => {\r\n        console.error('❌ Database connection failed:', err.stack);\r\n    });\r\n\r\n    app.get('/api/data', async (req, res) => {\r\n        try {\r\n            const result = await client.query('SELECT * FROM financial_data ORDER BY date');\r\n            res.json(result.rows);\r\n        } catch (error) {\r\n            console.error('❌ Error fetching data:', error);\r\n            res.status(500).json({ error: 'Internal server error' });\r\n        }\r\n    });\r\n\r\n    DROP TABLE IF EXISTS financial_data;\r\n    CREATE TABLE financial_data (\r\n        id SERIAL PRIMARY KEY,\r\n        date DATE NOT NULL,\r\n        income DECIMAL(10,2) NOT NULL,\r\n        outcome DECIMAL(10,2) NOT NULL,\r\n        clear DECIMAL(10,2) GENERATED ALWAYS AS (income - outcome) STORED\r\n    );\r\n    \r\n    SELECT * FROM financial_data;"
        }
    ]
}